/**
 * üìä Results & Analysis Module
 * Handles results calculation, analysis generation, and display functionality
 * Provides comprehensive score visualization and sharing capabilities
 */

import { API_BASE, getAbilityColor, safeGetElement } from './utilities-config.js';
import { logEvent } from './event-tracking.js';
import { gameState } from './core-game-management.js';

/**
 * üéØ ResultsAnalyzer Class
 * Analyzes game data and generates comprehensive ability assessments
 */
export class ResultsAnalyzer {
    constructor() {
        this.analysisResults = null;
        this.isAnalyzing = false;
        console.log('üìä ResultsAnalyzer initialized');
    }

    /**
     * üöÄ Perform comprehensive results analysis
     * Sends data to server for AI-powered analysis and scoring
     * @returns {Promise<Object>} Analysis results
     */
    async performAnalysis() {
        if (this.isAnalyzing) {
            console.warn('‚ö†Ô∏è Analysis already in progress');
            return this.analysisResults;
        }

        this.isAnalyzing = true;
        console.log('üîç Starting results analysis...');

        try {
            // Log analysis start
            await logEvent('analysis_start', {
                session_id: gameState.sessionId,
                test_mode: gameState.testMode,
                stages_completed: gameState.testMode === 'ai' ? gameState.aiStageCount : gameState.currentStage,
                total_time: Date.now() - gameState.startTime,
                timestamp: Date.now()
            });

            // Send analysis request to server
            const analysisData = await this.requestServerAnalysis();
            
            if (analysisData) {
                this.analysisResults = analysisData;
                console.log('‚úÖ Server analysis completed successfully');
            } else {
                // Fallback to local analysis
                console.warn('‚ö†Ô∏è Server analysis failed, using fallback');
                this.analysisResults = this.generateFallbackResults();
            }

            // Log analysis completion
            await logEvent('analysis_complete', {
                analysis_method: analysisData ? 'server' : 'fallback',
                scores_generated: Object.keys(this.analysisResults.scores || {}).length,
                timestamp: Date.now()
            });

            return this.analysisResults;

        } catch (error) {
            console.error('‚ùå Analysis error:', error);
            this.analysisResults = this.generateFallbackResults();
            return this.analysisResults;
        } finally {
            this.isAnalyzing = false;
        }
    }

    /**
     * üåê Request analysis from server
     * @returns {Promise<Object|null>} Server analysis results
     * @private
     */
    async requestServerAnalysis() {
        if (!gameState.sessionId) {
            console.error('‚ùå No session ID for analysis request');
            return null;
        }

        try {
            console.log('üåê Requesting server analysis...');
            
            const response = await fetch(`${API_BASE}/session/${gameState.sessionId}/analyze`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    test_mode: gameState.testMode,
                    completion_time: Date.now() - gameState.startTime,
                    stages_completed: gameState.testMode === 'ai' ? gameState.aiStageCount : gameState.currentStage
                })
            });

            if (!response.ok) {
                console.error(`‚ùå Server analysis failed: ${response.status}`);
                return null;
            }

            const results = await response.json();
            console.log('‚úÖ Server analysis received');
            return results;

        } catch (error) {
            console.error('‚ùå Network error during analysis:', error);
            return null;
        }
    }

    /**
     * üîÑ Generate fallback results when server analysis fails
     * @returns {Object} Fallback analysis results
     * @private
     */
    generateFallbackResults() {
        console.log('üîÑ Generating fallback results...');
        
        const baseScores = {
            analytical: 65 + Math.random() * 20,
            creative: 60 + Math.random() * 25,
            social: 55 + Math.random() * 30,
            technical: 70 + Math.random() * 15,
            research: 62 + Math.random() * 23
        };

        return {
            scores: Object.entries(baseScores).map(([type, score]) => ({
                type,
                name: this.getAbilityName(type),
                score: Math.round(score),
                level: this.getAbilityLevel(score),
                description: this.getAbilityDescription(type, score),
                icon: this.getAbilityIcon(type)
            })),
            confidence: 0.7,
            recommendations: this.generateBasicRecommendations(baseScores),
            analysis_method: 'fallback',
            timestamp: Date.now()
        };
    }

    /**
     * üè∑Ô∏è Get display name for ability type
     * @param {string} type - Ability type
     * @returns {string} Display name
     * @private
     */
    getAbilityName(type) {
        const names = {
            analytical: '–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ',
            creative: '–¢–≤–æ—Ä—á—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ',
            social: '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏',
            technical: '–¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏',
            research: '–î–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ'
        };
        return names[type] || type;
    }

    /**
     * üéØ Determine ability level based on score
     * @param {number} score - Ability score (0-100)
     * @returns {string} Ability level description
     * @private
     */
    getAbilityLevel(score) {
        if (score >= 80) return '–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å';
        if (score >= 60) return '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å';
        if (score >= 40) return '–ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å';
        return '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å';
    }

    /**
     * üìù Get description for ability and score
     * @param {string} type - Ability type
     * @param {number} score - Ability score
     * @returns {string} Description text
     * @private
     */
    getAbilityDescription(type, score) {
        const descriptions = {
            analytical: score >= 70 
                ? '–í—ñ–¥–º—ñ–Ω–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –ª–æ–≥—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è'
                : '–•–æ—Ä–æ—à—ñ –±–∞–∑–æ–≤—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É',
            creative: score >= 70
                ? '–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Ç–≤–æ—Ä—á–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–æ—Å—Ç—ñ'
                : '–¢–≤–æ—Ä—á–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É',
            social: score >= 70
                ? '–í—ñ–¥–º—ñ–Ω–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –º—ñ–∂–æ—Å–æ–±–∏—Å—Ç—ñ—Å–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è'
                : '–ë–∞–∑–æ–≤—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è',
            technical: score >= 70
                ? '–°–∏–ª—å–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ —Ç–∞ –ª–æ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è'
                : '–¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –Ω–∞ –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ',
            research: score >= 70
                ? '–í—ñ–¥–º—ñ–Ω–Ω—ñ –¥–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥'
                : '–î–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫—ñ –Ω–∞–≤–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É'
        };
        return descriptions[type] || '–ó–¥—ñ–±–Ω—ñ—Å—Ç—å –æ—Ü—ñ–Ω–µ–Ω–∞ –Ω–∞ –±–∞–∑–æ–≤–æ–º—É —Ä—ñ–≤–Ω—ñ';
    }

    /**
     * üé® Get icon for ability type
     * @param {string} type - Ability type
     * @returns {string} Icon emoji
     * @private
     */
    getAbilityIcon(type) {
        const icons = {
            analytical: 'üìä',
            creative: 'üé®',
            social: 'üë•',
            technical: '‚öôÔ∏è',
            research: 'üî¨'
        };
        return icons[type] || 'üéØ';
    }

    /**
     * üí° Generate basic recommendations
     * @param {Object} scores - Ability scores
     * @returns {Object} Recommendations object
     * @private
     */
    generateBasicRecommendations(scores) {
        const topAbilities = Object.entries(scores)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 2);

        const improvementAreas = Object.entries(scores)
            .sort(([,a], [,b]) => a - b)
            .slice(0, 2);

        return {
            strengths: {
                title: "–í–∞—à—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏:",
                abilities: topAbilities.map(([type, score]) => ({
                    name: this.getAbilityName(type),
                    score: Math.round(score),
                    characteristics: this.getStrengthCharacteristics(type)
                }))
            },
            development: {
                title: "–û–±–ª–∞—Å—Ç—ñ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É:",
                abilities: improvementAreas.map(([type, score]) => ({
                    name: this.getAbilityName(type),
                    score: Math.round(score),
                    tips: this.getDevelopmentTips(type)
                }))
            },
            career_paths: {
                title: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –Ω–∞–ø—Ä—è–º–∫–∏:",
                paths: this.getCareerRecommendations(topAbilities[0][0])
            },
            next_steps: {
                title: "–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:",
                actions: [
                    "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    "–í–∏–∑–Ω–∞—á—Ç–µ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É",
                    "–°–∫–ª–∞–¥—ñ—Ç—å –ø–ª–∞–Ω –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–ª–∞–±–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω",
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –≤ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ–π –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ"
                ]
            }
        };
    }

    /**
     * üí™ Get strength characteristics for ability
     * @param {string} type - Ability type
     * @returns {string[]} Characteristics list
     * @private
     */
    getStrengthCharacteristics(type) {
        const characteristics = {
            analytical: ["–õ–æ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è", "–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö", "–ö—Ä–∏—Ç–∏—á–Ω–µ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è"],
            creative: ["–Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ—Å—Ç—å", "–¢–≤–æ—Ä—á–∏–π –ø—ñ–¥—Ö—ñ–¥", "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–¥–µ–π"],
            social: ["–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è", "–ï–º–ø–∞—Ç—ñ—è", "–ö–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞"],
            technical: ["–¢–µ—Ö–Ω—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è", "–í–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º", "–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω—ñ—Å—Ç—å"],
            research: ["–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è", "–ê–Ω–∞–ª—ñ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", "–°–∏–Ω—Ç–µ–∑ –∑–Ω–∞–Ω—å"]
        };
        return characteristics[type] || ["–í–∏—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª"];
    }

    /**
     * üìà Get development tips for ability
     * @param {string} type - Ability type
     * @returns {string[]} Development tips
     * @private
     */
    getDevelopmentTips(type) {
        const tips = {
            analytical: ["–í–∏–≤—á–∞–π—Ç–µ –ª–æ–≥—ñ–∫—É —Ç–∞ –∫—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è", "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º"],
            creative: ["–ó–∞–π–º–∞–π—Ç–µ—Å—è —Ç–≤–æ—Ä—á–∏–º–∏ —Ö–æ–±—ñ", "–ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ –Ω–æ–≤–∏–º–∏ —ñ–¥–µ—è–º–∏"],
            social: ["–†–æ–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤–∏—á–∫–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–µ —Å–ª—É—Ö–∞–Ω–Ω—è"],
            technical: ["–í–∏–≤—á–∞–π—Ç–µ –Ω–æ–≤—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–í–∏—Ä—ñ—à—É–π—Ç–µ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–∞–¥–∞—á—ñ"],
            research: ["–ß–∏—Ç–∞–π—Ç–µ –Ω–∞—É–∫–æ–≤—É –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä—É", "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"]
        };
        return tips[type] || ["–ü–æ—Å—Ç—ñ–π–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è"];
    }

    /**
     * üíº Get career recommendations based on top ability
     * @param {string} topAbility - Strongest ability type
     * @returns {string[]} Career recommendations
     * @private
     */
    getCareerRecommendations(topAbility) {
        const careers = {
            analytical: ["–ê–Ω–∞–ª—ñ—Ç–∏–∫ –¥–∞–Ω–∏—Ö", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–î–æ—Å–ª—ñ–¥–Ω–∏–∫", "–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫"],
            creative: ["–î–∏–∑–∞–π–Ω–µ—Ä", "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "–ü–∏—Å—å–º–µ–Ω–Ω–∏–∫", "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä"],
            social: ["HR-—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç", "–ü—Å–∏—Ö–æ–ª–æ–≥", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–¢—Ä–µ–Ω–µ—Ä"],
            technical: ["–†–æ–∑—Ä–æ–±–Ω–∏–∫", "–Ü–Ω–∂–µ–Ω–µ—Ä", "–°–∏—Å—Ç–µ–º–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", "–ê–Ω–∞–ª—ñ—Ç–∏–∫"],
            research: ["–ù–∞—É–∫–æ–≤–µ—Ü—å", "–ê–Ω–∞–ª—ñ—Ç–∏–∫", "–ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"]
        };
        return careers[topAbility] || ["–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç"];
    }
}

/**
 * üé® ResultsDisplayManager Class
 * Manages the display and visualization of analysis results
 */
export class ResultsDisplayManager {
    constructor() {
        console.log('üé® ResultsDisplayManager initialized');
    }

    /**
     * üñºÔ∏è Display analysis results on the results page
     * @param {Object} results - Analysis results
     */
    displayResults(results) {
        console.log('üñºÔ∏è Displaying analysis results...');

        try {
            const chartContainer = safeGetElement('abilityChart', 'ResultsDisplayManager');
            const insightsContainer = safeGetElement('insights', 'ResultsDisplayManager');

            if (chartContainer) {
                this.displayAbilityChart(chartContainer, results);
            }

            if (insightsContainer) {
                this.displayRecommendations(insightsContainer, results);
            }

            console.log('‚úÖ Results displayed successfully');

        } catch (error) {
            console.error('‚ùå Error displaying results:', error);
            this.displayErrorMessage();
        }
    }

    /**
     * üìä Display ability scores chart
     * @param {HTMLElement} container - Chart container
     * @param {Object} results - Analysis results
     * @private
     */
    displayAbilityChart(container, results) {
        container.innerHTML = '';

        if (!results.scores || results.scores.length === 0) {
            container.innerHTML = '<p>–î–∞–Ω—ñ –ø—Ä–æ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ</p>';
            return;
        }

        results.scores.forEach((ability, index) => {
            const abilityItem = document.createElement('div');
            abilityItem.className = 'ability-item detailed';
            abilityItem.innerHTML = `
                <div class="ability-header">
                    <div class="ability-icon" style="color: ${getAbilityColor(ability.type)}">
                        ${ability.icon}
                    </div>
                    <div class="ability-info">
                        <div class="ability-name">${ability.name}</div>
                        <div class="ability-level">${ability.level}</div>
                        <div class="ability-bar">
                            <div class="ability-fill" 
                                 style="background-color: ${getAbilityColor(ability.type)}; width: 0%;">
                            </div>
                        </div>
                    </div>
                    <div class="ability-percentage">${ability.score}%</div>
                </div>
                <div class="ability-description">
                    ${ability.description}
                </div>
            `;

            container.appendChild(abilityItem);

            // Animate the progress bar
            setTimeout(() => {
                const fill = abilityItem.querySelector('.ability-fill');
                if (fill) {
                    fill.style.width = `${ability.score}%`;
                }
            }, 300 + index * 150);
        });
    }

    /**
     * üí° Display recommendations and insights
     * @param {HTMLElement} container - Insights container
     * @param {Object} results - Analysis results
     * @private
     */
    displayRecommendations(container, results) {
        if (!results.recommendations) {
            container.innerHTML = '<p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ</p>';
            return;
        }

        const recommendations = results.recommendations;
        let html = '<div class="recommendations-section"><h3>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h3>';

        // Strengths section
        if (recommendations.strengths) {
            html += `
                <div class="rec-block">
                    <h4>${recommendations.strengths.title}</h4>
                    ${recommendations.strengths.abilities.map(ability => `
                        <div class="strength-item">
                            <strong>${ability.name} (${ability.score}%)</strong>
                            <ul>
                                ${ability.characteristics.map(char => `<li>${char}</li>`).join('')}
                            </ul>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        // Development section
        if (recommendations.development) {
            html += `
                <div class="rec-block">
                    <h4>${recommendations.development.title}</h4>
                    ${recommendations.development.abilities.map(ability => `
                        <div class="development-item">
                            <strong>${ability.name} (${ability.score}%)</strong>
                            <ul>
                                ${ability.tips.map(tip => `<li>${tip}</li>`).join('')}
                            </ul>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        // Career paths section
        if (recommendations.career_paths) {
            html += `
                <div class="rec-block">
                    <h4>${recommendations.career_paths.title}</h4>
                    <div class="career-list">
                        ${recommendations.career_paths.paths.map(path => 
                            `<span class="career-tag">${path}</span>`
                        ).join('')}
                    </div>
                </div>
            `;
        }

        // Next steps section
        if (recommendations.next_steps) {
            html += `
                <div class="rec-block">
                    <h4>${recommendations.next_steps.title}</h4>
                    <ul>
                        ${recommendations.next_steps.actions.map(action => `<li>${action}</li>`).join('')}
                    </ul>
                </div>
            `;
        }

        html += '</div>';
        container.innerHTML = html;
    }

    /**
     * ‚ùå Display error message when results display fails
     * @private
     */
    displayErrorMessage() {
        const resultsContainer = safeGetElement('stage-results', 'ResultsDisplayManager');
        if (resultsContainer) {
            resultsContainer.innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <h2>‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</h2>
                    <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.</p>
                    <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem;">
                        –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                    </button>
                </div>
            `;
        }
    }
}

// Global instances
export const resultsAnalyzer = new ResultsAnalyzer();
export const resultsDisplayManager = new ResultsDisplayManager();

/**
 * üöÄ Main function to analyze and display results
 * @returns {Promise<Object>} Analysis results
 */
export async function analyzeAndDisplayResults() {
    console.log('üöÄ Starting results analysis and display...');

    const results = await resultsAnalyzer.performAnalysis();
    resultsDisplayManager.displayResults(results);

    return results;
}

/**
 * üîó Share results functionality
 */
export function shareResults() {
    console.log('üîó Sharing results...');

    if (navigator.share) {
        navigator.share({
            title: 'üß† –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π',
            text: '–Ø –ø—Ä–æ–π—à–æ–≤ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –æ—Ü—ñ–Ω–∫–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π!',
            url: window.location.href
        }).then(() => {
            console.log('‚úÖ Results shared successfully');
        }).catch(error => {
            console.error('‚ùå Share failed:', error);
        });
    } else {
        // Fallback for browsers without Web Share API
        const url = window.location.href;
        navigator.clipboard.writeText(url).then(() => {
            alert('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!');
            console.log('‚úÖ URL copied to clipboard');
        }).catch(error => {
            console.error('‚ùå Copy failed:', error);
            alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
        });
    }
}

console.log('‚úÖ Results & Analysis module loaded');