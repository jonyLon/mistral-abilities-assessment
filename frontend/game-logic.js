/**
 * üß† –Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω–∫–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π
 * JavaScript –ª–æ–≥—ñ–∫–∞ –≥—Ä–∏ –∑ –∑–±–æ—Ä–æ–º —Ä–µ–∞–ª—å–Ω–∏—Ö –ø–æ–≤–µ–¥—ñ–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 * 
 * üèóÔ∏è REFACTORED MODULAR ARCHITECTURE
 * This file now serves as the main orchestrator that coordinates between:
 * - utilities-config.js: Global constants, utilities, and configuration
 * - event-tracking.js: User behavior tracking and analytics
 * - core-game-management.js: Game state, initialization, and flow control
 * - mode-selection-ai.js: AI mode logic and question generation
 * - game-stages.js: Individual stage implementations
 * - results-analysis.js: Results calculation and display
 */

// üì¶ Import all refactored modules
import {
    API_BASE,
    GAME_DURATION,
    GAME_STAGES,
    AI_STAGES,
    GAME_MODES,
    validateDOMElements
} from './utilities-config.js';

import {
    behaviorTracker,
    startBehaviorTracking,
    logEvent,
    logResponse,
    stopBehaviorTracking
} from './event-tracking.js';

import {
    gameState,
    initializeGame,
    nextStage,
    restartGame,
    finishGame
} from './core-game-management.js';

import {
    initAIStage,
    isAIMode,
    getCurrentAIStage,
    getAIProgress
} from './mode-selection-ai.js';

import {
    initializeGameStage
} from './game-stages.js';

import {
    analyzeAndDisplayResults,
    shareResults
} from './results-analysis.js';

/**
 * üéÆ ORCHESTRATOR FUNCTIONS
 * High-level functions that coordinate between modules
 */

// üé® Enhanced initGame function that delegates to core game management
async function initGame() {
    console.log('üé® –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏...');
    
    try {
        // Validate essential DOM elements before starting
        const requiredElements = [
            'timer', 'progressBar', 'navigationButtons', 'nextButton',
            'stage-mode-select', 'standardMode', 'aiMode'
        ];
        
        if (!validateDOMElements(requiredElements)) {
            throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ DOM');
        }
        
        // Delegate to core game management module
        const success = await initializeGame();
        
        if (!success) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ—Å–Ω–æ–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏');
        }
        
        // Initialize stage-specific logic integration
        setupStageLogicIntegration();
        
        console.log('‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: –ì—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
    }
}

/**
 * üîå Stage Logic Integration Setup
 * Connects the core game management with stage-specific implementations
 */
function setupStageLogicIntegration() {
    console.log('üîå –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –ª–æ–≥—ñ–∫–∏ –µ—Ç–∞–ø—ñ–≤...');
    
    // Override the stage logic initialization in core game management
    if (gameState && gameState.initializeStageLogic) {
        const originalInitStageLogic = gameState.initializeStageLogic;
        
        gameState.initializeStageLogic = async function(stageName) {
            console.log(`üîå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ –µ—Ç–∞–ø—É ${stageName}`);
            
            try {
                // Check if this is an AI mode stage
                if (isAIMode() && stageName !== 'mode-select') {
                    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞—î–º–æ AI –µ—Ç–∞–ø:', stageName);
                    await initAIStage(stageName);
                } else if (stageName !== 'mode-select' && stageName !== 'loading' && stageName !== 'results') {
                    console.log('üéØ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –µ—Ç–∞–ø:', stageName);
                    await initializeGameStage(stageName);
                } else if (stageName === 'results') {
                    console.log('üìä –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...');
                    await analyzeAndDisplayResults();
                }
                
                console.log(`‚úÖ –õ–æ–≥—ñ–∫–∞ –µ—Ç–∞–ø—É ${stageName} —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞`);
                
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥—ñ–∫–∏ –µ—Ç–∞–ø—É ${stageName}:`, error);
                
                // Fallback: enable next button after delay
                setTimeout(() => {
                    const nextButton = document.getElementById('nextButton');
                    if (nextButton) {
                        nextButton.disabled = false;
                        console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–Ω–æ–ø–∫—É "–î–∞–ª—ñ" —è–∫ fallback');
                    }
                }, 2000);
            }
        };
    }
    
    console.log('‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ª–æ–≥—ñ–∫–∏ –µ—Ç–∞–ø—ñ–≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞');
}

/**
 * üåê GLOBAL FUNCTIONS
 * Expose module functionality to maintain compatibility with existing HTML
 */

// üé® Navigation functions (compatible with existing onclick handlers)
window.nextStage = async function() {
    console.log('üåê –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: nextStage –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    try {
        await nextStage();
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ—Ç–∞–ø:', error);
    }
};

window.restartGame = function() {
    console.log('üåê –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: restartGame –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    restartGame();
};

window.finishGame = async function() {
    console.log('üåê –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: finishGame –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    try {
        await finishGame();
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏:', error);
    }
};

window.shareResults = function() {
    console.log('üåê –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: shareResults –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    shareResults();
};

// üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –¥–µ–±–∞–≥—É)
window.getGameStats = function() {
    return {
        gameState: gameState,
        behaviorStats: behaviorTracker.getTrackingStats(),
        aiProgress: isAIMode() ? getAIProgress() : null,
        currentStage: gameState.getCurrentStageName ? gameState.getCurrentStageName() : 'unknown'
    };
};

// üîß –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–µ–±–∞–≥—É (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –∫–æ–Ω—Å–æ–ª—å—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞)
window.debugGame = {
    skipToStage: function(stageName) {
        console.log(`üîß –î–µ–±–∞–≥: –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –µ—Ç–∞–ø ${stageName}`);
        // This would need to be implemented in the core module
    },
    
    getCurrentState: function() {
        return window.getGameStats();
    },
    
    logCurrentEvents: function() {
        console.log('üîß –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–¥—ñ—ó:', behaviorTracker.getTrackingStats());
    }
};

/**
 * üéØ ERROR HANDLING & MODULE LOADING
 */

// üö® –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤
function handleModuleError(error, moduleName) {
    console.error(`üö® –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è ${moduleName}:`, error);
    
    const errorMessage = `
        –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è: ${moduleName}
        ${error.message}
        
        –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
        1. –ß–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –º–æ–¥—É–ª—ñ–≤ –ø—Ä–∏—Å—É—Ç–Ω—ñ
        2. –ß–∏ —Å–µ—Ä–≤–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—î ES –º–æ–¥—É–ª—ñ
        3. –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è type="module" –≤ HTML
    `;
    
    alert(errorMessage);
}

/**
 * üè† PAGE INITIALIZATION
 * Main page load and cleanup handlers
 */

// üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–æ—ó –≥—Ä–∏ –æ—Ü—ñ–Ω–∫–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π...');
    
    try {
        // –ß–µ–∫–∞—î–º–æ, —á–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
        if (typeof gameState === 'undefined') {
            throw new Error('–ú–æ–¥—É–ª—å core-game-management.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
        
        if (typeof behaviorTracker === 'undefined') {
            throw new Error('–ú–æ–¥—É–ª—å event-tracking.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
        
        console.log('‚úÖ –í—Å—ñ –º–æ–¥—É–ª—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –≥—Ä—É
        await initGame();
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
        handleModuleError(error, '–û—Å–Ω–æ–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞');
    }
});

// üßπ –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', (e) => {
    console.log('üßπ –ü–æ–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –ª–æ–≥—É—î–º–æ –ø–æ–¥—ñ—é...');
    
    try {
        logEvent('game_exit', { 
            stage: gameState.getCurrentStageName ? gameState.getCurrentStageName() : 'unknown',
            timestamp: Date.now() 
        });
        
        // –ó—É–ø–∏–Ω—è—î–º–æ —Ç—Ä–µ–∫—ñ–Ω–≥
        if (behaviorTracker && behaviorTracker.isTracking) {
            stopBehaviorTracking();
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);
    }
});

// üèÅ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
console.log('‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä game-logic.js —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
console.log('üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞');
