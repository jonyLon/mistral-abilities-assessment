/**
 * üß† –°–ø—Ä–æ—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω–∫–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π
 * –õ—ñ–Ω—ñ–π–Ω–∏–π –ø—Ä–æ—Ö—ñ–¥ —á–µ—Ä–µ–∑ 10 –µ—Ç–∞–ø—ñ–≤ –±–µ–∑ —Å–∫–ª–∞–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏
const gameState = {
    questions: [],
    currentStageIndex: 0,
    responses: {},
    startTime: Date.now()
};

// API –±–∞–∑–æ–≤–∏–π URL
const API_BASE = 'http://localhost:8000';

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
async function initGame() {
    console.log('üéÆ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏...');
    
    try {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑ JSON
        const response = await fetch('questions.json');
        const data = await response.json();
        gameState.questions = data.stages;
        
        console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${gameState.questions.length} –µ—Ç–∞–ø—ñ–≤`);
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø
        showStage(0);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø
 */
function showStage(index) {
    const stage = gameState.questions[index];
    const container = document.getElementById('gameContainer');
    
    if (!stage) {
        console.error('‚ùå –ï—Ç–∞–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', index);
        return;
    }
    
    console.log(`üìä –ü–æ–∫–∞–∑—É—î–º–æ –µ—Ç–∞–ø ${index + 1}/${gameState.questions.length}: ${stage.title}`);
    
    // –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
    const progress = ((index + 1) / gameState.questions.length) * 100;
    document.getElementById('progressBar').style.width = `${progress}%`;
    document.getElementById('stageCounter').textContent = `–ï—Ç–∞–ø ${index + 1} –∑ ${gameState.questions.length}`;
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ HTML –¥–ª—è –µ—Ç–∞–ø—É
    container.innerHTML = `
        <div class="stage-container">
            <div class="stage-header">
                <span class="stage-icon">${stage.icon}</span>
                <h2 class="stage-title">${stage.title}</h2>
            </div>
            
            <div class="question">
                <p>${stage.question}</p>
            </div>
            
            <div class="choices-grid">
                ${stage.choices.map((choice, i) => `
                    <button class="choice-button" onclick="selectChoice(${i})" id="choice-${i}">
                        ${choice.text}
                    </button>
                `).join('')}
            </div>
        </div>
    `;
}

/**
 * –û–±—Ä–æ–±–∏—Ç–∏ –≤–∏–±—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
 */
function selectChoice(choiceIndex) {
    const stage = gameState.questions[gameState.currentStageIndex];
    const choice = stage.choices[choiceIndex];
    
    console.log(`‚úÖ –í–∏–±—Ä–∞–Ω–æ: ${choice.text} (${choice.category}, –≤–∞–≥–∞: ${choice.weight})`);
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    gameState.responses[stage.id] = {
        choice: choiceIndex,
        category: choice.category,
        weight: choice.weight,
        timestamp: Date.now() - gameState.startTime
    };
    
    // –í—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫
    document.getElementById(`choice-${choiceIndex}`).classList.add('selected');
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    setTimeout(() => {
        nextStage();
    }, 500);
}

/**
 * –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
 */
function nextStage() {
    gameState.currentStageIndex++;
    
    if (gameState.currentStageIndex >= gameState.questions.length) {
        // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –∞–Ω–∞–ª—ñ–∑
        showLoading();
        analyzeResults();
    } else {
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ—Ç–∞–ø
        showStage(gameState.currentStageIndex);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
function showLoading() {
    const container = document.getElementById('gameContainer');
    container.innerHTML = `
        <div class="loading-screen">
            <div class="spinner"></div>
            <h2>üß† –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...</h2>
            <p>Mistral Nemo –æ–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π</p>
        </div>
    `;
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ –∞–Ω–∞–ª—ñ–∑
 */
async function analyzeResults() {
    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ –∞–Ω–∞–ª—ñ–∑...');
    console.log('–í—ñ–¥–ø–æ–≤—ñ–¥—ñ:', gameState.responses);
    
    try {
        const response = await fetch(`${API_BASE}/analyze`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                responses: gameState.responses
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const results = await response.json();
        console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', results);
        
        showResults(results);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:', error);
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        const container = document.getElementById('gameContainer');
        container.innerHTML = `
            <div class="error-screen">
                <h2>‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É</h2>
                <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞.</p>
                <p class="error-details">${error.message}</p>
                <button onclick="location.reload()" class="restart-button">
                    –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
                </button>
            </div>
        `;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
 */
function showResults(results) {
    const container = document.getElementById('gameContainer');
    
    const scores = results.ability_scores || {};
    const insights = results.insights || [];
    const confidence = (results.confidence || 0) * 100;
    
    console.log('üìä –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', results);
    
    // –ó–Ω–∞–π—Ç–∏ —Ç–æ–ø –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
    const topAbilities = Object.entries(scores)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3);
    
    container.innerHTML = `
        <div class="results-screen">
            <h1>üéâ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π</h1>
            
            <div class="confidence-indicator">
                <p>–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ: <strong>${confidence.toFixed(0)}%</strong></p>
            </div>
            
            <div class="abilities-chart">
                ${createAbilityBar('üìä –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ', scores.analytical || 0, '#2196F3')}
                ${createAbilityBar('üé® –¢–≤–æ—Ä—á—ñ', scores.creative || 0, '#9C27B0')}
                ${createAbilityBar('üë• –°–æ—Ü—ñ–∞–ª—å–Ω—ñ', scores.social || 0, '#4CAF50')}
                ${createAbilityBar('üîß –¢–µ—Ö–Ω—ñ—á–Ω—ñ', scores.technical || 0, '#FF9800')}
                ${createAbilityBar('üî¨ –î–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫—ñ', scores.research || 0, '#F44336')}
            </div>
            
            <div class="top-abilities">
                <h3>üèÜ –í–∞—à—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏:</h3>
                <ol>
                    ${topAbilities.map(([ability, score]) => `
                        <li>${getAbilityName(ability)}: <strong>${score.toFixed(0)}%</strong></li>
                    `).join('')}
                </ol>
            </div>
            
            <div class="insights">
                <h3>üí° –Ü–Ω—Å–∞–π—Ç–∏:</h3>
                <ul>
                    ${insights.map(insight => `<li>${insight}</li>`).join('')}
                </ul>
            </div>
            
            <button onclick="location.reload()" class="restart-button">
                üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É
            </button>
        </div>
    `;
    
    // –ê–Ω—ñ–º—É–≤–∞—Ç–∏ –±–∞—Ä–∏
    setTimeout(() => {
        document.querySelectorAll('.ability-fill').forEach(bar => {
            bar.style.width = bar.dataset.width;
        });
    }, 100);
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞—Ä –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
 */
function createAbilityBar(name, value, color) {
    return `
        <div class="ability-row">
            <span class="ability-name">${name}</span>
            <div class="ability-bar-container">
                <div class="ability-fill" data-width="${value}%" style="background-color: ${color}"></div>
            </div>
            <span class="ability-value">${value.toFixed(0)}%</span>
        </div>
    `;
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
 */
function getAbilityName(ability) {
    const names = {
        analytical: '–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ',
        creative: '–¢–≤–æ—Ä—á—ñ',
        social: '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ',
        technical: '–¢–µ—Ö–Ω—ñ—á–Ω—ñ',
        research: '–î–æ—Å–ª—ñ–¥–Ω–∏—Ü—å–∫—ñ'
    };
    return names[ability] || ability;
}

// –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥—Ä—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', initGame);
