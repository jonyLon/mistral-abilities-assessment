#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –≤ LLaMA
"""

import asyncio
from llama_analyzer import LlamaAnalyzer

async def test_ukrainian_support():
    print("üá∫üá¶ –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –≤ LLaMA...")
    
    analyzer = LlamaAnalyzer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
    status = await analyzer.check_status()
    print(f"–°—Ç–∞—Ç—É—Å LLaMA: {status}")
    
    if status != "ready":
        print("‚ùå LLaMA –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    test_responses = {
        "creative_text": "–Ø —Ö–æ—á—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –ª—é–¥—è–º –≤–∏–≤—á–∞—Ç–∏ –º–æ–≤–∏ —á–µ—Ä–µ–∑ —ñ–≥—Ä–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
        "logic_choice": "–Ø –∑–∞–≤–∂–¥–∏ –∞–Ω–∞–ª—ñ–∑—É—é –ø—Ä–æ–±–ª–µ–º—É —Å–∏—Å—Ç–µ–º–Ω–æ –ø–µ—Ä–µ–¥ –ø—Ä–∏–π–Ω—è—Ç—Ç—è–º —Ä—ñ—à–µ–Ω—å",
        "social_choice": "–í–≤–∞–∂–∞—é –∑–∞ –∫—Ä–∞—â–µ –≤–∏—Å–ª—É—Ö–∞—Ç–∏ –≤—Å—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –ø–µ—Ä–µ–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É"
    }
    
    test_creative = ["–Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è"]
    
    test_behavioral = {
        "logic_score": 0.8,
        "creativity_score": 0.75,
        "social_score": 0.6,
        "technical_score": 0.7,
        "exploration_score": 0.85
    }
    
    try:
        print("\nüìä –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –¥–∞–Ω–∏—Ö...")
        
        result = await analyzer.analyze_responses(
            responses=test_responses,
            creative_outputs=test_creative,
            behavioral_data=test_behavioral
        )
        
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:")
        print("üìà –û—Ü—ñ–Ω–∫–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π:")
        for ability, score in result['ability_scores'].items():
            print(f"  - {ability}: {score}%")
        
        print(f"\nüéØ –†—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏: {result['confidence']:.1%}")
        
        print("\nüí° –Ü–Ω—Å–∞–π—Ç–∏ –≤—ñ–¥ AI:")
        for i, insight in enumerate(result['insights'], 1):
            print(f"  {i}. {insight}")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
        ukrainian_chars = any(char in ''.join(result['insights']) for char in '–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è')
        
        if ukrainian_chars:
            print("\n‚úÖ LLaMA —É—Å–ø—ñ—à–Ω–æ –≥–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é!")
        else:
            print("\n‚ö†Ô∏è LLaMA –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, –∞–ª–µ —Ä–æ–∑—É–º—ñ—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {e}")

if __name__ == "__main__":
    asyncio.run(test_ukrainian_support())